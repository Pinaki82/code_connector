*code_connector.txt*    Code Connector Plugin Documentation

==============================================================================
CONTENTS                                                  *code-connector-contents*

    1. Overview ............................ |code-connector-overview|
    2. Installation ........................ |code-connector-installation|
    3. Usage ............................... |code-connector-usage|
    4. Configuration ....................... |code-connector-configuration|
    5. Repository .......................... |code-connector-repository|
    6. Building and Running ................ |code-connector-building|
    7. Example Commands .................... |code-connector-examples|
    8. CMakeLists.txt ...................... |code-connector-cmakelists|
    9. Source Files ........................ |code-connector-source-files|
   10. Header Files ........................ |code-connector-header-files|
   11. Snippets and Templates .............. |code-connector-snippets|
   12. Logging ............................. |code-connector-logging|
   13. Contributing ........................ |code-connector-contributing|
   14. List of Snippets .................... |code-connector-snippets-list|

==============================================================================
1. OVERVIEW                                            *code-connector-overview*

The Code Connector plugin enhances the Vim editing experience by providing
function parameter completion, code snippets, and more. It uses LLVM Clang for
code completion and is designed to work seamlessly with C/C++ projects.

==============================================================================
2. INSTALLATION                                     *code-connector-installation*

To install the Code Connector plugin, follow these steps:

1. Place the `code_connector.vim` file in your Vim plugin directory (e.g.,
   `~/.vim/plugin/` on Unix-like systems or `~/vimfiles/plugin/` on Windows).

2. Create two files in your project root directory:
   - `.ccls`
   - `compile_flags.txt`

   NOTE: The `.ccls` and `compile_flags.txt` files should be placed at
   least one directory level up from the source files, not alongside the source.
   A blank project, `blankTuluCIDEproj.zip`, is provided for reference to the
   correct directory structure.

3. For more detailed instructions, refer to the CCLS_GEN repository:
   https://github.com/Pinaki82/Tulu-C-IDE/tree/main/CCLS_GEN

==============================================================================
3. USAGE                                               *code-connector-usage*

The plugin provides the following functionality:

- Press `<C-CR>` (Ctrl+Enter) to complete function parameters
  and placeholder navigation.
- After typing a function name, add the first opening bracket (e.g., `double
  result = remainderf(`) and press Enter.
- NOTE: Always press the Enter key after the first opening bracket of a function
  to trigger completion.
- After typing a snippet abbreviation, do not include a bracket.
  Expanding it doesn't require a bracket, and doing so will result
  in unintended outcomes.
- TIP: [vim-jsnippets](https://github.com/Pinaki82/vim-jsnippets.git)
  and [code_connector](https://github.com/Pinaki82/code_connector.git) is an
  ideal combination.

Reloading the Buffer:
If an undesirable output gets in the way, reload the buffer using the
[Reload-Button](https://github.com/Pinaki82/Reload-Button) plugin or
press `u` in the Normal Mode.

==============================================================================
4. CONFIGURATION                                 *code-connector-configuration*

The plugin supports the following configuration options:

- |g:disable_codeconnector|        Disable the Code Connector plugin.
                                  Default: 0 (enabled).

- |g:completekey|                 The key used to complete function parameters
                                  and keywords.
                                  Default: `<C-CR>`.

- |g:rs| and |g:re|               Region start and stop markers. These can be
                                  customized as needed.
                                  Default: Not specified (plugin-specific).

- |g:user_defined_snippets|       File name of user-defined snippets.
                                  Default: Not specified (plugin-specific).

- |g:CodeComplete_Ignorecase|     Enable case-insensitive keyword completion.
                                  Default: 0 (disabled).

Example configuration in your |vimrc|:
>
    let g:disable_codeconnector = 0
    let g:completekey = '<C-CR>'
    let g:CodeComplete_Ignorecase = 1
<
==============================================================================
5. REPOSITORY                                       *code-connector-repository*

For more information, visit the Tulu-C-IDE repository:
https://github.com/Pinaki82/Tulu-C-IDE

==============================================================================
6. BUILDING AND RUNNING                             *code-connector-building*

The plugin can be built on both Linux and Windows platforms. Follow the
instructions below for your platform.

Linux: >
    mkdir -p build
    cd build
    cmake ..
    make config=Debug platform=Linux
    Or,
    make config=Release platform=Linux
<
Windows: >
    mkdir build
    cd build
    cmake -G "MinGW Makefiles" ..
    mingw32-make config=Debug
    Or,
    mingw32-make config=Release
<
==============================================================================
7. EXAMPLE COMMANDS                                 *code-connector-examples*

Below are example commands to run the plugin's executable on Linux and Windows.

Linux: >
    ./code_connector_executable file.c 12 24
    ./code_connector_executable file1.c 10 13
    ./code_connector_executable file2.c 9 13
<
Windows: >
    code_connector_executable.exe file.c 12 24
    code_connector_executable.exe file1.c 10 13
    code_connector_executable.exe file2.c 9 13
<
==============================================================================
8. CMAKELISTS.TXT                                 *code-connector-cmakelists*

The `CMakeLists.txt` file is used to configure the build process for the
plugin. It supports both Linux and Windows platforms and includes settings for
different build types (Debug and Release).

==============================================================================
9. SOURCE FILES                                 *code-connector-source-files*

The plugin includes the following source files:

- `ccls_index_gen_windows.c`       Windows-specific implementation for
                                   generating CCLS index.
- `code_connector_executable.c`    Main executable for code completion.
- `code_connector_executable_windows.c` Windows-specific implementation for
                                   code completion.
- `code_connector_shared.c`        Shared library for common functionality.
- `code_connector_shared_windows.c` Windows-specific implementation for shared
                                   library.

==============================================================================
10. HEADER FILES                               *code-connector-header-files*

The plugin includes the following header files:

- `code_connector_shared.h`        Header file for shared library.

==============================================================================
11. SNIPPETS AND TEMPLATES                      *code-connector-snippets*

The plugin includes a variety of code snippets and templates for C and C++
languages. These can be customised and extended to fit specific needs.

To define your own snippets, configure the |g:user_defined_snippets| option to
point to a file containing your custom snippets.

The Code Connector plugin includes a variety of code snippets and templates for
C and C++ languages. These snippets can be customised and extended to fit
specific needs.

To use the provided snippets, follow these steps:

1. **Triggering Snippets**:
   - Press `<C-x>` followed by `<C-CR>` to get a list of available code snippets.
   - Select a snippet using the Up/Down Arrow keys and press Enter to insert it.

2. **Expanding Snippets**:
   - Once a snippet is inserted, hit CTRL + Enter, it will be expanded.
   - Placeholders within the snippet can be navigated
     using the 'CTRL + Enter' (`<C-CR>`) key.

3. **Custom Snippets**:
   - To define your own snippets, configure the `g:user_defined_snippets`
     option and add your snippets to `my_snippets.vim`. Add entries to
     `snippets.txt` to find them by pressing 'CTRL + x' and then 'CTRL + Enter'.

Example of a snippet:
>
    # Custom Snippet for a for-loop
    for : for (`<init>`; `<condition>`; `<increment>`) {
          }
<
- The `<init>` placeholder can be edited directly after expansion.
- The `<increment>` placeholder is the final cursor position after all previous
  placeholders have been navigated.

4. **Using Snippets in Vim**:
   - After configuring the custom snippets, you can use them in the same way as
     the built-in snippets by pressing `<C-CR>`.

For more detailed information on creating and using snippets, refer to the
sections `" C templates`, `" Additional C templates`, `" Code Snippets - C`,
`" C++ templates`, `" Additional C++ templates`, and `" common templates` in
the file `code_connector.vim`.

==============================================================================
12. LOGGING                                       *code-connector-logging*

The plugin includes a logging mechanism to help with debugging and monitoring.
Logs are written to the following locations:

- Linux: `/tmp/vim_parser_log.txt`
- Windows: `C:\Temp\vim_parser_log.txt`

==============================================================================
13. CONTRIBUTING                               *code-connector-contributing*

Contributions to the Code Connector plugin are welcome! Please follow the
guidelines in the repository for submitting pull requests and reporting issues:
https://github.com/Pinaki82/Tulu-C-IDE

==============================================================================
14. LIST OF SNIPPETS                          *code-connector-snippets-list*

---------------------------------------------------------------------------
cc :

/*  */

---------------------------------------------------------------------------
cd :

/**<  */

---------------------------------------------------------------------------
de :

#define  `<MACRO_TEMPLATE_DEFINITION_UPPERCASE_ONLY(_with,_arguments,_small,_case)>`  `<macro_expansion_value_(or_math_expression)>`

---------------------------------------------------------------------------
in :

#include ""

---------------------------------------------------------------------------
is :

#include <>

---------------------------------------------------------------------------
ff :

#ifndef  __TEMPLATE_C__
#define  __TEMPLATE_C__




#endif  /* __TEMPLATE_C__ */

---------------------------------------------------------------------------
for :

for (`<init>`; `<condition>`; `<increment>`) {
}

---------------------------------------------------------------------------
main :

int main(int argc, char *argv[]) {
  `<...>`
}

---------------------------------------------------------------------------
switch :

switch ( `<...>` ) {
  case `<...>` :
    break;
  case `<...>` :
    break;
  default :
    break;
}

---------------------------------------------------------------------------
if :

if( `<...>` ) {
  `<...>`
}

---------------------------------------------------------------------------
ifelse :

if (`<condition>`) {
}
else {
}

---------------------------------------------------------------------------
while :

while (`<condition>`) {
  `<...>`
}

---------------------------------------------------------------------------
ife :

if( `<...>` )
{
  `<...>`
}
else
{
  `<...>`
}

---------------------------------------------------------------------------
case :

  case `<...>`:
    break;

---------------------------------------------------------------------------
printf :

printf( "`<...>`\n" );

---------------------------------------------------------------------------
print :

printf("`<message>`\n");

---------------------------------------------------------------------------
snprintf :

int result = snprintf(`<buffer>`, `<size>`, "`<format_string>`", `<...>`);

---------------------------------------------------------------------------
log :

fprintf(stderr, "`<message>`\n");

---------------------------------------------------------------------------
scanf :

scanf( "%`<...>`  %`<...>`", `<&>``<...>`, `<&>``<...>` );

---------------------------------------------------------------------------
sscanf :

int result = sscanf(`<input_string>`, "`<format_string>`", `<...>`);

---------------------------------------------------------------------------
do :

do {
   `<...>`
} while (`<condition>`);

---------------------------------------------------------------------------
elf :

  else if ( `<...>` )
  {
    `<...>`
  }

---------------------------------------------------------------------------
else :

  else
  {
    `<...>`
  }

---------------------------------------------------------------------------
fin :

fflush(stdin);

---------------------------------------------------------------------------
system :

system("`<...>`");

---------------------------------------------------------------------------
TODO : (HINT: Visual select the text, then U for uppercase
              or u for lowercase. Type `todo` and change the case.)

/* TODO: `<...>` */

---------------------------------------------------------------------------
FIXME :
---------------------------------------------------------------------------
NOTE
---------------------------------------------------------------------------
XXX
---------------------------------------------------------------------------
enum
---------------------------------------------------------------------------
struct
---------------------------------------------------------------------------
union
---------------------------------------------------------------------------
calloc
---------------------------------------------------------------------------
malloc
---------------------------------------------------------------------------
free
---------------------------------------------------------------------------
realloc
---------------------------------------------------------------------------
mallocs
---------------------------------------------------------------------------
callocs
---------------------------------------------------------------------------
reallocs
---------------------------------------------------------------------------
frees
---------------------------------------------------------------------------
sizeof
---------------------------------------------------------------------------
assert
---------------------------------------------------------------------------
filein
---------------------------------------------------------------------------
fileout
---------------------------------------------------------------------------
fprintf
---------------------------------------------------------------------------
fscanf
---------------------------------------------------------------------------

in1 :

#include <errno.h>
#include <stdint.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <`<...>`>
#include <`<...>`>
#include "`<...>`"
#include "`<...>`"
---------------------------------------------------------------------------
ffc
---------------------------------------------------------------------------
def
---------------------------------------------------------------------------
und
---------------------------------------------------------------------------
ifm
---------------------------------------------------------------------------
er
---------------------------------------------------------------------------
ifd
---------------------------------------------------------------------------
ifn
---------------------------------------------------------------------------
elm
---------------------------------------------------------------------------
eli
---------------------------------------------------------------------------
en
---------------------------------------------------------------------------
lin
---------------------------------------------------------------------------
pra
---------------------------------------------------------------------------
fileopen
---------------------------------------------------------------------------
fileread
---------------------------------------------------------------------------
filewrite
---------------------------------------------------------------------------
fileclose
---------------------------------------------------------------------------
filereadwrite
---------------------------------------------------------------------------
struct
---------------------------------------------------------------------------
union
---------------------------------------------------------------------------
enum
---------------------------------------------------------------------------
errorcheck
---------------------------------------------------------------------------
socket
---------------------------------------------------------------------------
bind
---------------------------------------------------------------------------
pthread_create
---------------------------------------------------------------------------
mutex_lock
---------------------------------------------------------------------------
mutex_unlock
---------------------------------------------------------------------------
llnode
---------------------------------------------------------------------------
queue
---------------------------------------------------------------------------
bitwise_and
---------------------------------------------------------------------------
bitwise_or
---------------------------------------------------------------------------
bitwise_xor
---------------------------------------------------------------------------
main_args
---------------------------------------------------------------------------
typedef_struct
---------------------------------------------------------------------------
typedef_enum
---------------------------------------------------------------------------
typedef_union
---------------------------------------------------------------------------
platform_linux
---------------------------------------------------------------------------
platform_mac
---------------------------------------------------------------------------
platform_windows
---------------------------------------------------------------------------
arch_intel
---------------------------------------------------------------------------
arch_arm
---------------------------------------------------------------------------
arch_riscv
---------------------------------------------------------------------------
bit_32_or_win32
---------------------------------------------------------------------------
bit_64_or_win64
---------------------------------------------------------------------------
platform_linux_64
---------------------------------------------------------------------------
platform_windows_32
---------------------------------------------------------------------------
bit_32_and_win32
---------------------------------------------------------------------------
compiler_gcc
---------------------------------------------------------------------------
compiler_msvc
---------------------------------------------------------------------------
compiler_clang
---------------------------------------------------------------------------
compiler_intel
---------------------------------------------------------------------------
compiler_sun
---------------------------------------------------------------------------
platform_linux_64_gcc
---------------------------------------------------------------------------
platform_windows_32_msvc
---------------------------------------------------------------------------
opt
---------------------------------------------------------------------------
menu
---------------------------------------------------------------------------
mainarg
---------------------------------------------------------------------------
usi
---------------------------------------------------------------------------
in2
---------------------------------------------------------------------------
cout
---------------------------------------------------------------------------
cin1
---------------------------------------------------------------------------
cin2
---------------------------------------------------------------------------
class
---------------------------------------------------------------------------
namespace
---------------------------------------------------------------------------
includeguard
---------------------------------------------------------------------------
lambda
---------------------------------------------------------------------------
trycatch
---------------------------------------------------------------------------
overload
---------------------------------------------------------------------------
templatefunc
---------------------------------------------------------------------------
constructor
---------------------------------------------------------------------------
destructor
---------------------------------------------------------------------------
operator
---------------------------------------------------------------------------
xt
---------------------------------------------------------------------------

==============================================================================
 vim:tw=78:ts=8:noet:ft=help:norl:
